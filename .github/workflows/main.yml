# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '30 3 * * 1,3,5' # Run on Monday, Wednesday, and Friday night at 3h30 UTC
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  linting:
    # The type of runner that the job will run on
    runs-on: [self-hosted, linux, x64]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: run isort
        run: |
          scripts/ci/run_with_singularity.sh isort . --check-only --diff --profile black --line-length 88

      - name: run Flake8
        run: >-
          scripts/ci/run_with_singularity.sh flake8 . --max-line-length 88
          --select=F401,F402,F403,F404,F405,F406,F407,F601,F602,F621,F622,F631,F632,F633,F634,F701,F702,F704,F706,F707,F721,F722,F723,F821,F822,F823,F831,F901

      - name: run Black
        run: |
          scripts/ci/run_with_singularity.sh black --exclude '(^\.git|\.github)' --check .

      - name: check Python Files
        run: |
          # Find all Python files and check their syntax in parallel
          find . -name '*.py' | \
          xargs -P 16 -I {} bash -c '
            echo "Checking python file: {}"
            scripts/ci/run_with_singularity.sh python -m py_compile "{}" || \
            { echo "Invalid python syntax in {}"; exit 1; }
          '

  setenv:
    runs-on: [self-hosted, linux, x64]
    needs: linting

    outputs:
      WREMNANTS_OUTDIR: ${{steps.export.outputs.WREMNANTS_OUTDIR}}


    steps:
      - uses: actions/checkout@v4

      - name: setup outdir
        run: echo "WREMNANTS_OUTDIR=/tmp/${USER}/$(uuidgen)" >> $GITHUB_ENV

      - id: export
        run: |
          echo "WREMNANTS_OUTDIR=$WREMNANTS_OUTDIR" >> $GITHUB_OUTPUT


  make-tensor:
    # The type of runner that the job will run on
    runs-on: [self-hosted, linux, x64]
    needs: setenv

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - env:
          WREMNANTS_OUTDIR: ${{ needs.setenv.outputs.WREMNANTS_OUTDIR }}
        run: |
          echo "WREMNANTS_OUTDIR=${WREMNANTS_OUTDIR}" >> $GITHUB_ENV

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: make tensor
        run: >-
          scripts/ci/run_with_singularity.sh scripts/ci/setup_and_run_python.sh tests/make_tensor.py -o $WREMNANTS_OUTDIR/test_tensor.hdf5

      - name: make sparse tensor
        run: >-
          scripts/ci/run_with_singularity.sh scripts/ci/setup_and_run_python.sh tests/make_tensor.py -o $WREMNANTS_OUTDIR/test_tensor_sparse.hdf5 --sparse


  fitting:
    # The type of runner that the job will run on
    runs-on: [self-hosted, linux, x64]
    needs: make-tensor

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - env:
          WREMNANTS_OUTDIR: ${{ needs.setenv.outputs.WREMNANTS_OUTDIR }}
        run: |
          echo "WREMNANTS_OUTDIR=${WREMNANTS_OUTDIR}" >> $GITHUB_ENV

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: nominal fit
        run: >- 
          scripts/ci/run_with_singularity.sh scripts/ci/setup_and_run_python.sh scripts/fit.py 
          $WREMNANTS_OUTDIR/test_tensor.hdf5 -o $WREMNANTS_OUTDIR/fitresults.hdf5
          -t -0 --binByBinStat -- --doImpacts --globalImpacts 
          --saveHists --computeHistErrors --project ch1 a --project ch1 b 

      - name: sparse tensor fit 
        run: >- 
          scripts/ci/run_with_singularity.sh scripts/ci/setup_and_run_python.sh scripts/fit.py 
          $WREMNANTS_OUTDIR/test_tensor_sparse.hdf5  -o $WREMNANTS_OUTDIR/fitresults_sparse.hdf5
          -t -0 --binByBinStat -- --doImpacts --globalImpacts 
          --saveHists --computeHistErrors --project ch1 a --project ch1 b 

      - name: pseudodata fit
        run: >- 
          scripts/ci/run_with_singularity.sh scripts/ci/setup_and_run_python.sh scripts/fit.py 
          $WREMNANTS_OUTDIR/test_tensor.hdf5 -o $WREMNANTS_OUTDIR/fitresults_pseudodata.hdf5
          --pseudoData original -t 0 --binByBinStat

      - name: chi2 fit
        run: >- 
          scripts/ci/run_with_singularity.sh scripts/ci/setup_and_run_python.sh scripts/fit.py 
          $WREMNANTS_OUTDIR/test_tensor.hdf5 -o $WREMNANTS_OUTDIR/fitresults_chi2.hdf5
          -t -0 --chisqFit --externalCovariance --doImpacts --globalImpacts 
          --saveHists --computeHistErrors --project ch1 a --project ch1 b 


  evaluation:
    # The type of runner that the job will run on
    runs-on: [self-hosted, linux, x64]
    needs: fitting

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - env:
          WREMNANTS_OUTDIR: ${{ needs.setenv.outputs.WREMNANTS_OUTDIR }}
        run: |
          echo "WREMNANTS_OUTDIR=${WREMNANTS_OUTDIR}" >> $GITHUB_ENV

      - uses: actions/checkout@v4

      - name: print impacts
        run: scripts/ci/run_with_singularity.sh scripts/ci/setup_and_run_python.sh scripts/printImpacts.py $WREMNANTS_OUTDIR/fitresults.hdf5 -s

      - name: print global impacts
        run: scripts/ci/run_with_singularity.sh scripts/ci/setup_and_run_python.sh scripts/printImpacts.py $WREMNANTS_OUTDIR/fitresults.hdf5 -s --globalImpacts

      - name: print pulls & constraints
        run: scripts/ci/run_with_singularity.sh scripts/ci/setup_and_run_python.sh scripts/printPullsAndConstraints.py $WREMNANTS_OUTDIR/fitresults.hdf5 


  copy-clean:
    runs-on: [self-hosted, linux, x64]
    needs: evaluation
    if: always() 
    steps:
      - env:
          WREMNANTS_OUTDIR: ${{ needs.setenv.outputs.WREMNANTS_OUTDIR }}
        run: |
          echo "WREMNANTS_OUTDIR=${WREMNANTS_OUTDIR}" >> $GITHUB_ENV

      - name: clean
        run: |
          echo "Removing temp directory $WREMNANTS_OUTDIR"
          rm -r $WREMNANTS_OUTDIR
